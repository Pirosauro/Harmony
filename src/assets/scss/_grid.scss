$grid_gutter_width: 1% !default;

%grid_container {
      width: 100%;
  max-width: 100%;
     margin: 0 auto;
   position: relative;
   overflow: visible !important;
      clear: both;
      *zoom: 1;

  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }

  & & {
    margin-left: 0 - $grid_gutter_width;
  }
}

/**
 * 1. Prevents columns from collapsing when empty.
 */

%grid_cell {
  margin-right: -100%;
      position: relative;
    min-height: 1px; /* 1 */
         clear: none;
         float: left;
         width: 100% - ($grid_gutter_width * 2);
   margin-left: $grid_gutter_width;
}

@mixin grid-build($grid_columns, $grid_gutter_width: 1%) {
  @if type-of($grid_columns) != 'number' or round($grid_columns) != $grid_columns {
    @warn("Not a number value: #{$grid_columns}");
  }
  @elseif type-of($grid_gutter_width) != 'number' or unit($grid_gutter_width) != '%' {
    @warn("Not a number value: #{$grid_gutter_width}");
  }
  @else{
    $element_width:  (100% - ($grid_gutter_width * ($grid_columns + 1))) / $grid_columns;

    & {
      @extend %grid_container;
    }

    // Cells
    @if $grid_columns > 1 {
      @for $i from 1 through ($grid_columns - 1) {
        #{&}--cell--#{$i} {
          @extend %grid_cell;

          width: ($element_width * $i) + ($grid_gutter_width * ($i - 1));
        }
      }
    }

    #{&}--cell--#{$grid_columns} {
      @extend %grid_cell;
    }

    // Offset
    @for $i from 1 through ($grid_columns - 1) {
      #{&}--offset--#{$i} {
        margin-left: ($element_width * $i) + ($grid_gutter_width * ($i + 1));
      }
    }

    #{&}--break {
      clear: left;
    }
  }
}
